title:      "Reading 04: Threads, Locks"
body:       |

    **Everyone**:

    For the past couple of weeks, we have studied how an operating system
    virtualizes the CPU by providing [processes] and [scheduling] policies.  By
    enabling users to execute multiple jobs simultaneously, the OS enables
    better utilization of the hardware and allows for more sophisticated
    workflows.  Unfortunately, this [multiprogramming] ability comes with the
    cost of complexity due to issues related to [concurrency].

    Last week, we briefly examined [event-based programming] as an approach to
    implementing [concurrency] within a single [process].  Unfortunately, we
    saw that there are limits to this approach, and so this week, we will
    introduce [pthreads] as an alternative method of implementing
    [concurrency].  Afterwards, we will further explore how to tackle the
    challenges of [thread]-based [concurrency] with tools such as [locks],
    [condition variables], and [semaphores].

    <div class="alert info-bg" markdown="1">

    #### <i class="icon icon-medium">{{ "book" | embed_icon }}</i> TL;DR

    For this reading assignment, you are to read about how to implement
    [concurrency] using [threads] and [locks], submit your responses to the
    [Reading 04 Quiz], and then modify your [Reading 03] program to use
    [pthreads].

    </div>

    [process]: https://en.wikipedia.org/wiki/Process_(computing)
    [processes]: https://en.wikipedia.org/wiki/Process_(computing)
    [scheduling]: https://en.wikipedia.org/wiki/Scheduling_(computing)
    [concurrency]: https://en.wikipedia.org/wiki/Concurrency_(computer_science)
    [event-based programming]: https://en.wikipedia.org/wiki/Event-driven_programming
    [thread]: https://en.wikipedia.org/wiki/Thread_(computing)
    [threads]: https://en.wikipedia.org/wiki/Thread_(computing)
    [select]: http://man7.org/linux/man-pages/man2/select.2.html
    [poll]: http://man7.org/linux/man-pages/man2/poll.2.html
    [multiprogramming]: https://en.wikipedia.org/wiki/Computer_multitasking
    [pthreads]: http://man7.org/linux/man-pages/man7/pthreads.7.html
    [locks]: https://en.wikipedia.org/wiki/Lock_(computer_science)
    [condition variables]: https://en.wikipedia.org/wiki/Monitor_(synchronization)
    [semaphores]: https://en.wikipedia.org/wiki/Semaphore_(programming)
    [system calls]: https://en.wikipedia.org/wiki/System_call
    [system call]: https://en.wikipedia.org/wiki/System_call

    ## Reading

    <div class="flex-row" markdown="1">

    <div class="flex-col" markdown="1">

    The readings for this week are:

    1.  <div class="flex-col" markdown="1">

        [Operating Systems: Three Easy Pieces]

        1. [Dialogue](http://pages.cs.wisc.edu/~remzi/OSTEP/dialogue-concurrency.pdf)
        2. [Concurrency and Threads](http://pages.cs.wisc.edu/~remzi/OSTEP/threads-intro.pdf)
        3. [Thread API](http://pages.cs.wisc.edu/~remzi/OSTEP/threads-api.pdf)
        4. [Locks](http://pages.cs.wisc.edu/~remzi/OSTEP/threads-locks.pdf)
        5. [Event-based Concurrency](http://pages.cs.wisc.edu/~remzi/OSTEP/threads-events.pdf)

    ### Optional Readings

    1.  <div class="flex-col" markdown="1">

        [On the duality of operating system structures](https://dl.acm.org/doi/10.1145/850657.850658)

        - [Why events are a bad idea](https://www.usenix.org/conference/hotos-ix/why-events-are-bad-idea-high-concurrency-servers)
        - [Why threads are a bad idea](https://web.stanford.edu/~ouster/cgi-bin/papers/threads.pdf)

    2. [Async IO on Linux: select, poll, and epoll](https://jvns.ca/blog/2017/06/03/async-io-on-linux--select--poll--and-epoll/)

    </div>

    <div class="flex-col-25 centered">
      <img src="static/img/ostep.jpg">
    </div>

    </div>

    [Linux]:    https://kernel.org

    ## Quiz

    Once you have done the readings, answer the following [Reading 04 Quiz]
    questions:

    <div id="quiz-questions"></div>

    <div id="quiz-responses"></div>

    <script src="static/js/dredd-quiz.js"></script>
    <script>
    loadQuiz('static/json/reading04.json');
    </script>

    <pre style="display: none;" id="dr-container" class="codehilite"><code id="dredd-response"></code></pre>

    ## Program

    For this week's program, you are to modify the `program.c` from [Reading
    03] such that you use separate [threads] instead of [processes] to compute
    the [SHA1] digest for each argument. In other words, for each file
    argument, you need to create a thread that computes and displays the [SHA1]
    digest of the contents of the file. The main thread should collect the exit
    statuses of its worker threads and return `0` if all the threads were
    successful.  Otherwise, it should return the number of threads that failed
    as its own exit status.

    ### Example

    The usage and output of your program should be the same as [sha1sum]:

        :::bash
        $ ./program Makefile  # Compute SHA1 of Makefile
        50bb7f7ccf1ca089f3c5eaff5fe95e56ddbe53a5  Makefile

        $ echo $?             # Check exit status
        0

        $ ./program asdf      # Handle invalid files

        $ echo $?             # Check exit status
        1

    ### Requirements

    - Your code must compile cleanly with no warnings.

    - Your program may only use I/O system calls such as [open], [read], and
      [close] to access the contents of each file.

    - Your program must use the [EVP_MD_CTX_new], [EVP_DigestInit_ex],
      [EVP_DigestUpdate], and [EVP_DigestFinal_ex] functions provided by
      [OpenSSL].

    - Your program must not have any resource leaks or memory errors as
      detected by [valgrind].

    - Your program must use [pthread_create] and [pthread_join].

    - Each thread must run concurrently (ie. without waiting for another
      thread to complete first).

    <div class="alert warning-bg" markdown="1">

    **Note**: To link properly to the [OpenSSL] functions, you will need to add
      `-lcrypto` to the `LIBS` variable in your `Makefile`.

    You will also need to add the `-pthread` flags to your `CFLAGS`.

    </div>

    [EVP_MD_CTX_new]: https://docs.openssl.org/3.3/man3/EVP_DigestInit/
    [EVP_DigestInit_ex]: https://docs.openssl.org/3.3/man3/EVP_DigestInit/
    [EVP_DigestUpdate]: https://docs.openssl.org/3.3/man3/EVP_DigestInit/
    [EVP_DigestFinal_ex]: https://docs.openssl.org/3.3/man3/EVP_DigestInit/

    ### Hints

    You should not need to modify your original `sha1sum_file` function from
    [Reading 03].  Instead, you should convert your existing `sha1sum_process`
    function into a similar `sha1sum_thread` function:

        :::c
        void *sha1sum_thread(void *arg) {
            char *path = (char *)arg;
            ...
            if (!sha1sum_file(path, cksum)) {
                ...   // Failure
            }
            ...       // Success
        }

    Once you have a `sha1sum_thread` function, you will need to modify the
    `main` function as follows:

        :::text
        function main():
            pthread_t thread[argc - 1]  # Thread array

            For each argument:
                Create a thread stored in thread[i] that runs sha1sum_thread

            For each thread in thread array:
                Join thread[i]
                Update the overall program status

    [processes]:        https://en.wikipedia.org/wiki/Process_(computing)
    [open]:             http://man7.org/linux/man-pages/man2/open.2.html
    [read]:             http://man7.org/linux/man-pages/man2/read.2.html
    [close]:            http://man7.org/linux/man-pages/man2/close.2.html
    [SHA1]:             https://en.wikipedia.org/wiki/SHA-1
    [stat]:             http://man7.org/linux/man-pages/man2/stat.2.html
    [sha1sum]:          https://man7.org/linux/man-pages/man1/sha1sum.1.html
    [processes]:        https://en.wikipedia.org/wiki/Process_(computing)
    [OpenSSL]:          https://www.openssl.org
    [fork bomb]:        https://en.wikipedia.org/wiki/Fork_bomb
    [pthread_create]:   https://man7.org/linux/man-pages/man3/pthread_create.3.html
    [pthread_join]:     https://man7.org/linux/man-pages/man3/pthread_join.3.html
    [valgrind]:         https://www.valgrind.org/

    ## Submission

    To submit you work, follow the same process outlined in [Reading 01]:

        :::bash
        $ git switch master                   # Make sure we are in master branch

        $ git pull --rebase                   # Make sure we are up-to-date with GitHub

        $ git checkout -b reading04           # Create reading04 branch and check it out

        $ cd reading04                        # Go into reading04 folder
        $ $EDITOR answers.json                # Edit your answers.json file

        $ ../.scripts/check.py                # Check reading04 quiz
        Checking reading04 quiz ...
              Q1 0.25
              Q2 0.15
              Q3 0.40
              Q4 0.15
              Q5 0.20
              Q6 0.15
              Q7 0.25
              Q8 0.15
              Q9 0.30
           Score 2.00 / 2.00
          Status Success

        $ git add answers.json                # Add answers.json to staging area
        $ git commit -m "Reading 04: Quiz"    # Commit work

        $ $EDITOR program.c                   # Edit your program.c file

        $ make test-program                   # Check reading04 program
        Testing reading04 program ...
         I/O System Calls                                             ... Success
         I/O Functions                                                ... Success
         Memory Functions                                             ... Success
         Crypto Functions                                             ... Success
         Process System Calls                                         ... Success
         Thread Functions                                             ... Success
         program                                                      ... Success
         program Makefile                                             ... Success
         program Makefile README.md                                   ... Success
         program Makefile README.md program.c                         ... Success
         program Makefile README.md program.c asdf                    ... Success
         program Makefile asdf README.md program.c fsda               ... Success
         program Makefile README.md /bin/ls /bin/bash                 ... Success
           Score 2.00 / 2.00
          Status Success

        $ git add program.c                   # Add program.c to staging area
        $ git add Makefile                    # Add Makefile to staging area
        $ git commit -m "Reading 04: Code"    # Commit work

        $ git push -u origin reading04        # Push branch to GitHub

    <div class="alert success-bg" markdown="1">

    ### <i class="icon icon-medium">{{ "account-question" | embed_icon }}</i> Graders

    Once you have committed your work and pushed it to [GitHub], remember to
    create a **pull request** and assign it to the appropriate **teaching
    assistant** from the [Reading 04 TA List].

    </div>

    [Operating Systems: Three Easy Pieces]: http://pages.cs.wisc.edu/~remzi/OSTEP/
    [JSON]: http://www.json.org/
    [git-branch]: https://git-scm.com/docs/git-branch
    [dredd]: https://dredd.h4x0r.space
    [GitHub]: https://github.com
    [valgrind]: https://www.valgrind.org/
    [Reading 01]: reading01.html
    [Reading 03]: reading03.html

    [Reading 04 Quiz]: static/json/reading04.json
    [Reading 04 TA List]: reading04_tas.html
