title:      "Reading 06: Semaphores, Concurrency Bugs"
body:       |

    **Everyone**:

    Last week, we discussed how to utilize [locks] and [condition variables] to
    synchronize multiple [threads] and to construct [concurrent data
    structures].  Though tricky, we saw that there were some common programming
    patterns that allow us to implement [monitor] style [mutual exclusion].

    The readings this week focus on another synchronization primitive called a
    [semaphore] and on how to use to different various [concurrency patterns].
    The readings will also explore various concurrency bugs like [deadlock] and
    the various ways we can use the synchronization primitives studied in this
    course to avoid such issues.

    <div class="alert info-bg" markdown="1">

    #### <i class="icon icon-medium">{{ "book" | embed_icon }}</i> TL;DR

    For this reading assignment, you are to read about [semaphores] and
    concurrency bugs, submit your responses to the [Reading 06 Quiz], and
    modify your program to implement **throttling**.

    </div>

    [concurrency]: https://en.wikipedia.org/wiki/Concurrency_(computer_science)
    [event-based programming]: https://en.wikipedia.org/wiki/Event-driven_programming
    [thread]: https://en.wikipedia.org/wiki/Thread_(computing)
    [threads]: https://en.wikipedia.org/wiki/Thread_(computing)
    [pthreads]: http://man7.org/linux/man-pages/man7/pthreads.7.html
    [locks]: https://en.wikipedia.org/wiki/Lock_(computer_science)
    [condition variables]: https://en.wikipedia.org/wiki/Monitor_(synchronization)
    [semaphore]: https://en.wikipedia.org/wiki/Semaphore_(programming)
    [semaphores]: https://en.wikipedia.org/wiki/Semaphore_(programming)
    [concurrent data structures]: https://en.wikipedia.org/wiki/Concurrent_data_structure
    [monitor]: https://en.wikipedia.org/wiki/Monitor_(synchronization)
    [mutual exclusion]: https://en.wikipedia.org/wiki/Mutual_exclusion
    [concurrency patterns]: https://en.wikipedia.org/wiki/Concurrency_pattern
    [deadlock]: https://en.wikipedia.org/wiki/Deadlock

    ## Reading

    <div class="flex-row" markdown="1">

    <div class="flex-col" markdown="1">

    The readings for this week are:

    1. [Operating Systems: Three Easy Pieces]

        1. [Semaphores](http://pages.cs.wisc.edu/~remzi/OSTEP/threads-sema.pdf)

        2. [Concurrency Bugs](http://pages.cs.wisc.edu/~remzi/OSTEP/threads-bugs.pdf)

        3. [Summary](http://pages.cs.wisc.edu/~remzi/OSTEP/threads-dialogue.pdf)

    ### Optional Resources

    1. [Overview of POSIX Semaphores](http://man7.org/linux/man-pages/man7/sem_overview.7.html)

    2. [The Little Book of Semaphores](https://open.umn.edu/opentextbooks/textbooks/83)

    3. [The Dining Philosophers Problem With Ron Swanson](http://adit.io/posts/2013-05-11-The-Dining-Philosophers-Problem-With-Ron-Swanson.html)

    </div>

    <div class="flex-col-25 centered">
      <img src="static/img/ostep.jpg">
    </div>

    </div>

    ## Quiz

    Once you have done the readings, answer the following [Reading 06 Quiz]
    questions:

    <div id="quiz-questions"></div>

    <div id="quiz-responses"></div>

    <script src="static/js/dredd-quiz.js"></script>
    <script>
    loadQuiz('static/json/reading06.json');
    </script>

    <pre style="display: none;" id="dr-container" class="codehilite"><code id="dredd-response"></code></pre>

    ## Program

    In [Reading 04], you created a [thread] to compute the [sha1sum] of each
    argument.  This provides concurrency and parallelism, but it is possible to
    overwhelm the system and waste time if there are a lot of arguments (and
    thus a lot of threads).  Instead of allowing all [threads] to run
    concurrently, we can use a [semaphore] to implement **throttling** and thus
    provide **admission control**.  Likewise, we can also use a [semaphore] to
    provide synchronized access to a global `Failures` counter that records the
    number of failed `sha1sum` computations and serves as our program's **exit
    status**.

    In summary, you are to modify the program in [Reading 04] to use one
    [semaphore] to implement **throttling** and another [semaphore] to
    synchronize access to a global variable.

    [c-string]: https://en.wikipedia.org/wiki/C_string_handling

    ### Example

    The usage and output of your program should be the same as [sha1sum]:

        :::bash
        $ ./program Makefile  # Compute SHA1 of Makefile
        50bb7f7ccf1ca089f3c5eaff5fe95e56ddbe53a5  Makefile

        $ echo $?             # Check exit status
        0

        $ ./program asdf      # Handle invalid files

        $ echo $?             # Check exit status
        1

    ### Requirements

    - Your code must compile cleanly with no warnings.

    - Your program may only use I/O system calls such as [open], [read], and
      [close] to access the contents of each file.

    - Your program must use the [EVP_MD_CTX_new], [EVP_DigestInit_ex],
      [EVP_DigestUpdate], and [EVP_DigestFinal_ex] functions provided by
      [OpenSSL].

    - Your program must not have any resource leaks or memory errors as
      detected by [valgrind].

    - Your program must use [sem_init], [sem_wait], and [sem_post] to
      manipulate your [semaphores].

    - Each thread must run concurrently (ie. without waiting for another
      thread to complete first) up to the `MAX_THREADS` limit.

    <div class="alert warning-bg" markdown="1">

    **Note**: To link properly to the [SHA1] functions, you will need to add
      `-lcrypto` to the `LIBS` variable in your `Makefile`.

    You will also need to add the `-pthread` flag to your `CFLAGS`.

    </div>

    [sem_init]: https://man7.org/linux/man-pages/man3/sem_init.3.html
    [sem_wait]: https://man7.org/linux/man-pages/man3/sem_wait.3.html
    [sem_post]: https://man7.org/linux/man-pages/man3/sem_post.3.html

    [EVP_MD_CTX_new]: https://docs.openssl.org/3.3/man3/EVP_DigestInit/
    [EVP_DigestInit_ex]: https://docs.openssl.org/3.3/man3/EVP_DigestInit/
    [EVP_DigestUpdate]: https://docs.openssl.org/3.3/man3/EVP_DigestInit/
    [EVP_DigestFinal_ex]: https://docs.openssl.org/3.3/man3/EVP_DigestInit/

    ### Hints

    You can define the following constants to make your life easier:

        :::c
        #define MAX_THREADS 2                 /* Maximum number of active threads */

    You will also want to define the following **global variables**:

        :::c
        sem_t  Lock;                          /* Semaphore for synchronizing access to Failures */
        sem_t  Running;                       /* Semaphore for throttling number of active threads to MAX_THREADS */
        size_t Failures = 0;                  /* Records number of failed sha1sum computations */

    You will need to modify your `sha1sum_thread` from [Reading 04] into the
    following structure:

        :::c
        void *sha1sum_thread(void *arg) {
            ... // Semaphore operation

            char cksum[SHA_DIGEST_LENGTH*2 + 1];
            char *path = (char *)arg;

            if (!sha1sum_file(path, cksum)) {
                ... // Semaphore operation
                Failures++;
                ... // Semaphore operation
            } else {
                printf("%s  %s\n", cksum, path);
            }

            ... // Semaphore operation
            return 0;
        }

    This [thread] function will perform the `sha1sum_file` function on the
    argument given to the [thread].  It will use one [semaphore] to
    **throttle** the total number of threads, while using another [semaphore]
    to guard the updating of the `Failures` global variable.

    To use the [semaphores], you will need to modify your `main` to initialize
    them to the appropriate values:

        :::text
        function main():
            # Initialize semaphores
            sem_init(&Lock, 0, ...)
            sem_init(&Running, 0, ...)

            # For each argument, create thread to compute sha1sum
            pthread_t thread[argc - 1]  # Thread array
            For each argument:
                Create a thread stored in thread[i] that runs sha1sum_thread

            # For each argument, join thread
            For each thread in thread array:
                Join thread[i]

            return Failures

    [processes]:        https://en.wikipedia.org/wiki/Process_(computing)
    [open]:             http://man7.org/linux/man-pages/man2/open.2.html
    [read]:             http://man7.org/linux/man-pages/man2/read.2.html
    [close]:            http://man7.org/linux/man-pages/man2/close.2.html
    [stat]:             http://man7.org/linux/man-pages/man2/stat.2.html
    [SHA1]:             https://en.wikipedia.org/wiki/SHA-1
    [sha1sum]:          https://man7.org/linux/man-pages/man1/sha1sum.1.html
    [processes]:        https://en.wikipedia.org/wiki/Process_(computing)
    [OpenSSL]:          https://www.openssl.org
    [pthread_create]:   https://man7.org/linux/man-pages/man3/pthread_create.3.html
    [pthread_join]:     https://man7.org/linux/man-pages/man3/pthread_join.3.html
    [valgrind]:         https://www.valgrind.org/

    ## Submission

    To submit you work, follow the same process outlined in [Reading 01]:

        :::bash
        $ git switch master                   # Make sure we are in master branch
        $ git pull --rebase                   # Make sure we are up-to-date with GitLab

        $ git checkout -b reading06           # Create reading06 branch and check it out

        $ cd reading06                        # Go into reading06 folder
        $ $EDITOR answers.json                # Edit your answers.json file

        $ ../.scripts/check.py                # Check reading06 quiz
        Checking reading06 quiz ...
             Q01 0.20
             Q02 0.10
             Q03 0.10
             Q04 0.10
             Q05 0.10
             Q06 0.20
             Q07 0.05
             Q08 0.15
             Q09 0.70
             Q10 0.30
           Score 2.00 / 2.00
          Status Success

        $ git add answers.json                # Add answers.json to staging area
        $ git commit -m "Reading 06: Quiz"    # Commit work

        $ $EDITOR program.c                   # Edit your program.c file

        $ make test-program                   # Check reading06 program
        Testing reading06 program...
         I/O System Calls                                             ... Success
         I/O Functions                                                ... Success
         Memory Functions                                             ... Success
         Crypto Functions                                             ... Success
         Process System Calls                                         ... Success
         Thread Functions                                             ... Success
         Semaphore Functions                                          ... Success
         program                                                      ... Success
         program Makefile                                             ... Success
         program Makefile README.md                                   ... Success
         program Makefile README.md program.c                         ... Success
         program Makefile README.md program.c asdf                    ... Success
         program Makefile asdf README.md program.c fsda               ... Success
         program Makefile README.md /bin/ls /bin/bash                 ... Success
           Score 2.00 / 2.00
          Status Success

        $ git add Makefile                    # Add Makefile to staging area
        $ git add program.c                   # Add program.c to staging area
        $ git commit -m "Reading 06: Code"    # Commit work

        $ git push -u origin reading06        # Push branch to GitHub

    <div class="alert success-bg" markdown="1">

    ### <i class="icon icon-medium">{{ "account-question" | embed_icon }}</i> Graders

    Once you have committed your work and pushed it to [GitHub], remember to
    create a **pull request** and assign it to the appropriate **teaching
    assistant** from the [Reading 06 TA List].

    </div>

    [Operating Systems: Three Easy Pieces]: http://pages.cs.wisc.edu/~remzi/OSTEP/
    [GitHub]: https://github.com
    [Reading 01]: reading01.html
    [Reading 04]: reading04.html
    [Reading 06 Quiz]: static/json/reading06.json
    [JSON]: http://www.json.org/
    [git-branch]: https://git-scm.com/docs/git-branch
    [dredd]: https://dredd.h4x0r.space
    [Reading 06 TA List]: reading06_tas.html
