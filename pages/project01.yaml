title:      "Project 01: Process Queue Shell"
body:       |

    The first project is to build a basic [shell] that serves as a multi-core
    **process queue** called `pqsh`.  This program allows the user to enter in
    a series of commands and then schedules the specified jobs to run on
    multiple CPU cores as separate processes.

    <div class="text-center">
      <img src="static/img/project01.png" class="responsive">
    </div>

    Working **individually** or in **pairs**, you are to utilize low-level
    [system calls] to create this `pqsh` [shell] by **noon** on **Tuesday,
    September 16, 2025**.  More details about this project and your
    deliverables are described below.

    ## Overview

    As shown above, the **process queue shell** has a queue of **running** jobs
    (ie. tasks that are actively assigned CPU time), and a queue of **waiting**
    jobs (ie.  tasks that haven't started yet or have been **preempted**).  Its
    purpose is to schedule as many **running** jobs as there are CPU cores
    using either the [FIFO] or [Round Robin] scheduling policies.

    Unlike a regular [shell], commands in `pqsh` are not executed right away.
    Instead, new jobs are added to a **waiting** queue, where they will be
    processed by an internal scheduling policy such as [FIFO] or [Round Robin].
    When there are available resouces (ie. **CPUs**), the **scheduler** will
    move the job from the **waiting** queue to the **running** queue.  When the
    job terminates, it will then move to the **finished** queue.

    ### Commands

    To interact with the [shell], the user has access to two **commands**:

    1. `add COMMAND`: This command adds the specified `COMMAND` as a job to
      the [shell]'s internal **waiting** queue.

    2. `status [QUEUE]`: This command displays metrics from the internal
      scheduler (ie. number of jobs in each queue, average **turnaround** time,
      and average **response** time), including the jobs in each of the
      internal **running**, **waiting**, and **finished** queues (if a
      `QUEUE` is specified then only that queue is displayed, otherwise
      **all** queues are shown).

    ### Scheduling

    The order in which jobs should be executed is determined by one of the
    following scheduling policies:

    1. [FIFO]: Execute jobs in the order in each they arrival in the process
    queue.

    2. [Round Robin]: Execute jobs in a round robin fashion.

    You must implement both scheduling disciplines along with any
    **accounting** and **preemption** mechanisms required to build these
    algorithms.

    <div class="alert success-bg" markdown="1">
    ### <i class="icon icon-medium">{{ "lightbulb" | embed_icon }}</i> Pseudo-Solutions

    This project relates directly to our discussion on schedulers.  Refer to
    your textbook, [Operating Systems: Three Easy Pieces] and the slides on
    scheduling: [Scheduling (FIFO, Round Robin)] and [Scheduling (MLFQ,
    Lottery)].

    </div>

    ### Usage

    The full set of `pqsh` command-line options are shown below:

    ```text
    $ bin/pqsh -h
    Usage: ./bin/pqsh [options]

    Options:
        -n CORES           Number of CPU cores to utilize
        -p POLICY          Scheduling policy (fifo, rdrn)
        -t MICROSECONDS    Timer interrupt interval
        -h                 Print this help message
    ```

    The number of **CPU** `CORES` and the scheduling `POLICY` can be
    specified by the user when the [shell] is started, but cannot change once
    it is active.  By default, the [shell] assumes **one** core and the [FIFO]
    scheduling policy.

    Here is an example of `pqsh` running one command using the [FIFO] scheduler
    on one `CORE`:

    ```text
    $ bin/pqsh

    PQSH> help
    Commands:
      add    command    Add command to waiting queue.
      status [queue]    Display status of specified queue (default is all).
      help              Display help message.
      exit|quit         Exit shell.

    PQSH> add bin/worksim 10
    Added process "bin/worksim 10" to waiting queue.

    PQSH> status
    Running =    1, Waiting =    0, Finished =    0, Turnaround =  -nan, Response =  -nan

    Running Queue:
         PID COMMAND                        ARRIVAL       START         END
       10071 bin/worksim 10                 1568055878.75 1568055878.95          0.00

    PQSH> status
    Running =    0, Waiting =    0, Finished =    1, Turnaround = 10.00, Response = 00.00

    Finished Queue:
         PID COMMAND                        ARRIVAL       START         END
       10071 bin/worksim 10                 1568055878.75 1568055878.95 1568055889.19
    ```

    Here is a video example using of `pqsh` and the output of its test programs:

    <div class="thumbnail text-center">
    <script src="https://asciinema.org/a/brCZV3grys76AsSlEqFnzRbcD.js" id="asciicast-brCZV3grys76AsSlEqFnzRbcD" async="true"></script>
    </div>

    ### Reference Implementation

    You can find a reference implementation of `pqsh` in the following
    location on the **student machines**:

        :::text
        /escnfs/home/pbui/pub/bin/pqsh

    Feel free to play around with this in order to explore how `pqsh` should
    behave.

    <div class="alert info-bg" markdown="1">
    ### <i class="icon icon-medium">{{ "scale" | embed_icon }}</i> Balancing the Load

    While it is unlikely that you will write an operating system scheduler in
    your career, you may need to implement or at least interact with things
    like [load balancers] or [batch queues], especially in parallel or
    distributed environments such as the [cloud].

    For instance, many websites use [Cloudflare], which performs load balancing to
    prevent [denial-of-service] attacks.  Similarly, the [CRC] uses systems
    such as [HTCondor] to schedule many jobs on the distributed computing
    cluster at Notre Dame.  In both of these situations some decision making is
    required to map jobs to a particular set of resources.

    This project will allow to explore the challenges in this type of decision
    making by having you implementing and test different types of scheduling
    policies for a **process queue**.

    </div>

    ## Deliverables

    As noted above, you are to work **individually** or in **pairs** to
    implement `pqsh`. You must use ([C99]) (not [C++]) as the implementation
    language for `pqsh` itself, while any test scripts are to be written in any
    reasonable scripting language.

    [C99]:      https://en.wikipedia.org/wiki/C99
    [C++]:      https://isocpp.org/

    ### Timeline

    Here is a timeline of events related to this project:

    <table class="bordered" markdown="1">
      <thead>
        <th>Date</th>
        <th>Event</th>
      </thead>
      <tbody>
        <tr class="success-bg">
          <td class="text-strong centered">Sunday, August 24</td>
          <td>Project description and repository are available.</td>
        </tr>
        <tr class="caution-bg">
          <td class="text-strong centered">Sunday, September 7</td>
          <td>Brainstorming should be completed.</td>
        </tr>
        <tr class="danger-bg">
          <td class="text-strong centered">Tuesday, September 16</td>
          <td>Implementation of `pqsh` must be completed.</td>
        </tr>
      </tbody>
    </table>

    <div class="alert success-bg" markdown="1">
    ### <i class="icon icon-medium">{{ "github" | embed_icon }}</i> Group Project

    For the final group project submission, please open a **Pull Request** on
    your **Project 01** repository (for your `project01` branch to the
    `master` branch) and assign it to the **instructor**.

    </div>

    ### Repository

    To start this project, you must create a [Project 01] repository on
    [GitHub] using the following template:

    > [https://classroom.github.com/a/qnk8vdQi](https://classroom.github.com/a/qnk8vdQi)

    <div class="alert warning-bg" markdown="1">

    **Note**: Do your work in a separate [git] branch that can be later merged
      into the `master` branch (ie. make a `project01` branch, `DO NOT
      COMMIT OR MERGE TO MASTER`).

    </div>

    ### Documentation

    The [Project 01] repository includes a `README.md` file with the
    following sections:

    1. **Students**: This should be your name and email address.

    2. **Video**: This should have the link to your **reflection video**
      (described below).

    3. **Brainstorming**: This contains questions that should help you design
      and plan your approach to the project.  You do not need to fill these
      out, but they are meant to be helpful.

    4. **Errata**: This should contain a description of any known errors or
    deficiencies in your implementation.

    5. **Acknowledgments**: This should list anyone you collaborated with or
      received help from (including TAs, students, and AI tools).

    You must complete this document report as part of your project.

    ### Source Code

    As you can see, the base [Project 01] repository contains a `README.md`
    file and the following folder hierarchy:

    ``` bash
    project01
        \_ Makefile     # This is the project Makefile
        \_ bin          # This contains the executables and test scripts
        \_ include      # This contains the header files
        \_ lib          # This contains the libraries
        \_ src          # This contains the C99 source code
        \_ tests        # This contains test source code
    ```

    You must maintain this folder structure for your project and place files in
    their appropriate place.

    <div class="alert warning-bg" markdown="1">
    ### <i class="icon icon-medium">{{ "code-tags" | embed_icon }}</i> K.I.S.S.

    While the exact organization of the project code is up to you, keep in mind
    that you will be graded in part on **coding style**, **cleaniness**, and
    **organization**. This means your code should be consistently formatted,
    not contain any dead code, have reasonable comments, and appropriate naming
    among other things:

    - Break long functions into smaller functions.

    - Make sure each function does one thing and does it well.

    - Abstract, but don't over do it.

    Please refer to these [Coding Style] slides for some tips and guidelines on
    coding style expectations.
    </div>

    #### Compiling

    To help you get started, we have provided a Makefile that will build the
    `pqsh` application for you:

    ``` bash
    $ make                      # Build pqsh executable
    Compiling src/pqsh.o
    Compiling src/options.o
    Compiling src/process.o
    Compiling src/queue.o
    Compiling src/timestamp.o
    Compiling src/scheduler.o
    Compiling src/scheduler_fifo.o
    Compiling src/scheduler_rdrn.o
    Linking lib/libpqsh.a
    Linking bin/pqsh
    ```

    #### Running

    Once you have the `pqsh` executable, you can run the shell with different
    number of `CORES` or with a different scheduling `POLICY`:

    ```bash
    $ ./bin/pqsh -p fifo        # Run shell with FIFO policy

    $ ./bin/pqsh -p rdrn -n 2   # Run shell with Round Robin policy and two cores
    ```

    To help you test your **process queue**, the `bin/worksim` script is
    provided to you.  This script is a **workload** simulator and you can use
    it to create a job that simulates a job that runs for a specified duration.
    For example, to create a job that runs for `10` seconds:

    ```bash
    $ ./bin/worksim 10
    ```

    This script will be useful for testing the different scheduling policies.

    #### Implementation

    All of the [C99] header files are in the `include/pq` folder while the
    [C99] source code is contained in the `src` directory.  To help you get
    started, parts of the project are already implemented:

    ``` bash
    [x] options.c               # PQSH parsing options (implemented)
    [~] pqsh.c                  # PQSH main executable (partially implemented)
    [ ] process.c               # PQSH process structure (not implemented)
    [ ] queue.c                 # PQSH queue structure (not implemented)
    [ ] scheduler.c             # PQSH scheduler structure (not implemented)
    [ ] scheduler_fifo.c        # PQSH FIFO scheduler policy (not implemented)
    [ ] scheduler_rdrn.c        # PQSH Round Robin scheduler policy (not implemented)
    [ ] timestamp.c             # PQSH timestamp (not implemented)
    ```

    Basically, some of `pqsh` shell code and command-line parsing functions are
    provided to you, but the scheduling and process management functions are
    not.  Each of the functions in the incomplete files above have comments
    that describe what needs to be done.

    You will need to examine these source files and complete the implementation
    of the [shell].  To do so, you will first need to implement a basic
    `Process` structure and a corresponding `Queue` structure:

    - `process.c`: This structure is used to keep track of a process in the
      system (reference at `include/pqsh/process.h`).

    - `queue.c`: This structure is used to track a list or queue or `Process`
      structures.  To enable efficient operations to the front and back of the
      list, the structure maintains pointers to both the `head` and `tail` of
      the queue.  Additionally, it has a `size` attribute that records the
      number of items in the queue at all times.

    - `scheduler.c`: This contains the main functions required for the [shell]
      include the internal operations and command handlers.

    - `scheduler_{fifo,rdrn}.c`: These contain the implementations to the
      corresponding scheduling policies.

    - `timestamp.c`: This contains the implementation of a function that
      returns the current time in the form of a `double`.

    #### Hints

    Here are some hints to help you get started with the project:

    -   <div class="flex-col">

        `process.c`: To start a process, you will need to [fork] and [exec].
        Consider using [execvp] by using [strtok] to form a local array of
        arguments to pass to the system call:

            :::c
            fork()

            Child:
                char *argv[MAX_ARGUMENTS] = {0}
                ...

                for (char *token = strtok(command, " "); token; token = strtok(NULL, " ")) {
                  argv[i++] = token;
                }

                execvp(argv[0], argv);
                ...

            Parent:
                Update timestamp

    -   <div class="flex-col">

        `scheduler.c`: When waiting, you should consider using [waitpid] so you
        do not block or hang.  If a child has terminated, then you should
        remove it from the queue it is in, update its metrics, and then move
        it to the finished queue.

            :::c
            while ((pid = waitpid(-1, NULL, WNOHANG)) > 0) {
                Process *found = queue_remove(&s->running, pid);
                ...
            }

    -   <div class="flex-col">

        `scheduler.c`: The [signal] handler functions,
          `scheduler_handle_sigalrm` and `scheduler_handle_sigchld`, should set
          the `event` attribute of the `PQSHScheduler` global variable to the
          appropriate value.

            :::c
            PQSHScheduler.event = ...

        To register the [signal] handler functions, you should use [sigaction]
        rather than [signal], as the latter restarts blocking system calls
        automatically (*which is not the behavior we want*):

            :::c
            struct sigaction sigalrm_action = {.sa_handler = scheduler_handle_sigalrm};
            if (sigaction(SIGALRM, &sigalrm_action, NULL) < 0) {
                ...
            }

    -   <div class="flex-col">

        `pqsh.c`: To activate a regular timer interval, you should consider
          using the [setitimer] system call.

            :::c
            struct itimerval interval = {
              .it_interval = { .tv_sec = 0, .tv_usec = s->timeout },
              .it_value    = { .tv_sec = 0, .tv_usec = s->timeout },
            };
            if (setitimer(ITIMER_REAL, &interval, NULL) < 0) {
                ...
            }

    -   <div class="flex-col">

        `pqsh.c`: To emulate an **event** based system, you should take
          advantage of the fact that [fgets] will block until **(1)** there is
          input, **(2)** there is no more input, or **(3)** if it is interrupted
          (ie. by a [signal]).  You should call [fgets] in a loop and check if
          the scheduler's `event` attribute has changed due to an interruption.

            :::c
            while (!fgets(command, BUFSIZ, stdin) && !feof(stdin)) {
                if (s->event ...) ... // Check events
                ...
                s->event = ...        // Reset event
            }

    [fork]: https://man7.org/linux/man-pages/man2/fork.2.html
    [exec]: https://man7.org/linux/man-pages/man3/exec.3.html
    [execvp]: https://man7.org/linux/man-pages/man3/exec.3.html
    [strtok]: https://man7.org/linux/man-pages/man3/strtok.3.html
    [waitpid]: https://man7.org/linux/man-pages/man2/waitpid.2.html
    [setitimer]: https://man7.org/linux/man-pages/man2/setitimer.2.html
    [fgets]: https://man7.org/linux/man-pages/man3/fgets.3.html
    [signal]: https://man7.org/linux/man-pages/man2/signal.2.html
    [signals]: https://man7.org/linux/man-pages/man2/signal.2.html
    [sigaction]: https://man7.org/linux/man-pages/man2/sigaction.2.html

    #### Testing

    To verify the correctness of the `Process`, `Queue`, and `timestamp`
    functions, three test programs are provided:

    ```
    $ make test-units
    Testing unit_process ...
     process_create                                               ... Success
     process_start                                                ... Success
     process_pause                                                ... Success
     process_resume                                               ... Success

    Testing unit_queue ...
     queue_push                                                   ... Success
     queue_pop                                                    ... Success
     queue_remove                                                 ... Success

    Testing unit_timestamp ...
     timestamp                                                    ... Success
    ```

    Likewise, to verify the behavior of your `pqsh` [shell], we have provided
    you a series of test scripts:

    ```
    $ make test-scripts
    Testing test_fifo_checklist ...
     Running PQSH commands                                        ... Success
     Verifying PQSH output                                        ... Success
     Verifying PQSH memory                                        ... Success

    Testing test_fifo_multicore ...
     Running PQSH commands                                        ... Success
     Verifying PQSH output                                        ... Success
     Verifying PQSH memory                                        ... Success

    Testing test_fifo ...
     Running PQSH commands                                        ... Success
     Verifying PQSH output                                        ... Success
     Verifying PQSH memory                                        ... Success

    Testing test_rdrn_checklist ...
     Running PQSH commands                                        ... Success
     Verifying PQSH output                                        ... Success
     Verifying PQSH memory                                        ... Success

    Testing test_rdrn_multicore ...
     Running PQSH commands                                        ... Success
     Verifying PQSH output                                        ... Success
     Verifying PQSH memory                                        ... Success

    Testing test_rdrn ...
     Running PQSH commands                                        ... Success
     Verifying PQSH output                                        ... Success
     Verifying PQSH memory                                        ... Success
    ```

    Note, you can always run a specific test directly:

    ```
    $ ./bin/test_fifo.sh      # Run FIFO test script
    ```

    If necessary, you should not hesitate in create your own additional test
    programs or scripts to facilitate verification and debugging.

    ## Reflection

    To reflect on the project and the concepts involved, you will need to
    create a group video demonstration of your software artifact and complete
    an individual quiz (*each member will submit their own answers to their own
    private assignments repository*).

    ### Video Demonstration

    As part of your grade, your group will need to create a video that
    demonstrates and discusses the following:

    1. Your project passing the automated tests.

    2. Your project working with manual input.

    3. Any errata, quirks, or unresolved issues in your project.

    4. What you learned by doing this project.

    <div class="alert info-bg" markdown="1">
    **Note**: The video should include narration to describe what is being
    presented and should cover the requirements enumerated above. It should
    be no longer than **5** minutes.
    </div>

    <div class="alert warning-bg" markdown="1">
    ### <i class="icon icon-medium">{{ "video" | embed_icon }}</i> Video Link

    Please upload the video to either [YouTube] or [Google Drive] and provide a
    link to it in your `README.md`.
    </div>

    ### Individual Quiz

    Once you have completed the project, answer the following [Project 01 Quiz]
    questions **individually** in your own personal **assignments** repository
    on [GitHub]:

    <div id="quiz-questions"></div>

    <div id="quiz-responses"></div>

    <script src="static/js/dredd-quiz.js"></script>
    <script>
    loadQuiz('static/json/project01.json');
    </script>

    <pre style="display: none;" id="dr-container" class="codehilite"><code id="dredd-response"></code></pre>

    The results of the quiz should look like the following:

        :::text
        Checking project01 quiz ...
              Q1 0.20
              Q2 0.20
              Q3 0.20
              Q4 0.50
              Q5 0.90
              Q6 1.00
           Score 3.00 / 3.00
          Status Success

    <div class="alert success-bg" markdown="1">
    ### <i class="icon icon-medium">{{ "github" | embed_icon }}</i> Individual Quiz

    Each group member must do the quiz on their own and record their answers in
    the **project01** folder in their **assignments** [GitHub] repository.

    Once you have committed your work and pushed it to [GitHub], remember to
    create a **pull request** and assign it to the appropriate **teaching
    assistant** from the [Reading 03 TA List].

    </div>

    [Reading 03 TA List]:     reading03_tas.html

    ## Grading

    Your project will be graded on the following metrics:

    <table class="bordered" markdown="1">
    <thead>
      <th>Metric</th>
      <th>Points</th>
    </thead>
    <tbody>
      <tr class="success-bg">
        <td class="flex-col">
        <strong>Source Code</strong>
        <ol>
            <li>
            <div class="flex-col">
            <b>General</b>
            <ul>
              <li>Builds and cleans without warnings or errors</li>
              <li>Manages resources such as memory and files appropriately</li>
              <li>Is consistent, readable, and organized</li>
              <li>Has regular commits and submitted on-time.</li>
            </ul>
            </div>
            </li>
            <li>
            <div class="flex-col">
            <b>Structures / Functions</b>
            <ul>
              <li>Implements <tt>Process</tt> structure properly.</li>
              <li>Implements <tt>Queue</tt> structure properly.</li>
              <li>Implements <tt>Timestamp</tt> function properly.</li>
            </ul>
            </div>
            </li>
            <li>
            <div class="flex-col">
            <b>Scheduler</b>
            <ul>
              <li>Implements <b>input</b> handling properly.</li>
              <li>Implements <b>timer</b> handling properly.</li>
              <li>Implements <b>child</b> handling properly.</li>
              <li>Implements <b>FIFO</b> scheduler behavior properly.</li>
              <li>Implements <b>RDRN</b> scheduler behavior properly.</li>
            </ul>
            </div>
            </li>
        </ol>
        </td>
        <td class="centered">
          <div class="flex-col">
          <p><b>10.00</b></p>
            <p><b><i>&nbsp;2.00</i></b></p>
              <p><i>&nbsp;0.50</i></p>
              <p><i>&nbsp;0.50</i></p>
              <p><i>&nbsp;0.50</i></p>
              <p><i>&nbsp;0.50</i></p>
            <p><b><i>&nbsp;2.00</i></b></p>
              <p><i>&nbsp;0.75</i></p>
              <p><i>&nbsp;1.00</i></p>
              <p><i>&nbsp;0.25</i></p>
            <p><b><i>&nbsp;6.00</i></b></p>
              <p><i>&nbsp;1.00</i></p>
              <p><i>&nbsp;1.00</i></p>
              <p><i>&nbsp;1.00</i></p>
              <p><i>&nbsp;1.00</i></p>
              <p><i>&nbsp;2.00</i></p>
            </div>
        </td>
      </tr>
      <tr class="caution-bg">
        <td class="flex-col">
        <strong>Reflection</strong>
        <ol>
          <li>
          <div class="flex-col">
          <b>Group Video Demonstration</b>
          <ul>
            <li>Exhibits reasonable audio and video quality</li>
            <li>Demonstrates passing automated tests</li>
            <li>Demonstrates working with manual input</li>
            <li>Discusses errata, quirks, or unresolved issues</li>
            <li>Discusses what the group learned from the project</li>
          </ul>
          </div>
          </li>
          <li><b>Individual Quiz</b></li>
        </ol>
        </td>
        <td class="centered">
          <div class="flex-col">
            <p><b>&nbsp;5.00</b></p>
              <p><b><i>&nbsp;2.00</i></b>
                <p><i>&nbsp;0.25</i></p>
                <p><i>&nbsp;0.75</i></p>
                <p><i>&nbsp;0.50</i></p>
                <p><i>&nbsp;0.25</i></p>
                <p><i>&nbsp;0.25</i></p>
              <p><b><i>&nbsp;3.00</i></b></p>
            </div>
        </ol>
        </td>
      </tr>
    </tbody>
    </table>

    <div class="alert warning-bg" markdown="1">
    ### <i class="icon icon-medium">{{ "git" | embed_icon }}</i> Commit History

    To encourage you to work on the project **regularly** (rather than leaving
    it until the last second) and to practice performing **incremental
    development**, part of your grade will be based on whether or not you have
    regular and reasonably sized commits in your [git] log.

    That is, you will **lose** points if you commit everything at once near the
    project deadline.

    </div>

    <div class="alert danger-bg" markdown="1">
    ### <i class="icon icon-medium">{{ "bug" | embed_icon }}</i> Error Handling

    In addition to meeting the functional requirements of the project (as
    described above), your program **must not exhibit any memory leaks** or
    **invalid memory accesses** as would be detected by [Valgrind].

    Additionally, because [system calls] can fail, your program must implement
    **robust error handling** and ensure your code checks the status of [system
    calls] when reasonable.

    Moreover, you code must compile **without any warnings** (and `-Wall` must
    be one of the `CFLAGS`).

    </div>

    [Linux]: https://kernel.org
    [git]: https://git-scm.com/
    [system call]:  https://en.wikipedia.org/wiki/System_call
    [system calls]: https://en.wikipedia.org/wiki/System_call
    [Valgrind]: http://valgrind.org/
    [Operating Systems: Three Easy Pieces]: http://pages.cs.wisc.edu/~remzi/OSTEP/
    [GitHub]: https://github.com
    [FIFO]: https://en.wikipedia.org/wiki/Scheduling_(computing)#First_come.2C_first_served
    [Round Robin]: https://en.wikipedia.org/wiki/Scheduling_(computing)#Round-robin_scheduling
    [Multi-Level Feedback Queue]: https://en.wikipedia.org/wiki/Scheduling_(computing)#Multilevel_queue_scheduling
    [Google Drive]: https://drive.google.com
    [IPC]: https://en.wikipedia.org/wiki/Inter-process_communication
    [named pipes]: https://en.wikipedia.org/wiki/Named_pipe
    [Unix domain sockets]: https://en.wikipedia.org/wiki/Unix_domain_socket
    [load balancers]: https://en.wikipedia.org/wiki/Load_balancing_(computing)
    [batch queues]: https://en.wikipedia.org/wiki/Job_queue
    [Cloudflare]: https://www.cloudflare.com/
    [HTCondor]: https://en.wikipedia.org/wiki/HTCondor
    [denial-of-service]: https://en.wikipedia.org/wiki/Denial-of-service_attack
    [cloud]: https://en.wikipedia.org/wiki/Cloud_computing
    [shell]: https://en.wikipedia.org/wiki/Shell_%28computing%29
    [Reading 03 TA List]: reading03_tas.html
    [CRC]: https://crc.nd.edu/
    [YouTube]: https://www.youtube.com/
    [Project 01 Quiz]: static/json/project01.json

    [Project 01]: https://github.com/nd-cse-30341-fa25/project01
    [Scheduling (FIFO, Round Robin)]: https://docs.google.com/presentation/d/1B_f8zBls_te5E38yGOTMM55M_H-8QM0eJ8B-zjNdiDg/edit?usp=sharing
    [Scheduling (MLFQ, Lottery)]: https://docs.google.com/presentation/d/1kb6xBc_KDF8cALHj5V1ORkhdmW42y7VDz5PEnrJbk9U/edit?usp=sharing
    [Coding Style]: static/img/coding-style.png
