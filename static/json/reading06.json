{
    "q01": {
        "type": "blank",
        "question": "\n<p>A <b>(1)</b> ____ is a synchronization primitive that consists of an\n<b>(2)</b> ____ value that we can manipulate with two routines:</p>\n\n<ol>\n\n  <li><b>(3)</b> ____: This function decrements the value of the semaphore\n    and waits if the value of the semaphore is negative.</li>\n\n  <li><b>(4)</b> ____: This function increments the value of the semaphore\n    and then wakes up any waiting threads.</li>\n\n</ol>\n"
    },
    "q02": {
        "type": "multiple",
        "question": "\n<p>Regarding using semaphores to implement locks and condition variables,\nwhich of the following statements are true (<i>choose all that apply</i>)?</p>\n",
        "responses": {
            "lock_init": "To make a lock (binary semaphore), we initialize the semaphore to 1.",
            "cond_init": "To make a condition variable, we initialize the semaphore to 1.",
            "lock_call": "To make a lock (binary semaphore), we first <code>sem_post</code>, perform the critical section, and then <code>sem_wait</code>",
            "cond_call": "To make a condition variable, we use <code>sem_post</code> to signal and <code>sem_wait</code> to wait."
        }
    },
    "q03": {
        "type": "multiple",
        "question": "\n<p>Regarding <b>reader-writer locks</b>, which of the following statements\nare true (<i>choose all that apply</i>)?</p>\n",
        "responses": {
            "concurrency": "Reader-writer locks allow for multiple concurrent readers as long as there are no writers.",
            "writers": "Reader-writer locks suspend all readers once a writer requires access.",
            "starvation": "Reader-writer locks are prone to starvation problems.",
            "overhead": "Reader-writer locks generally improve performance over simple and fast locking primitives."
        }
    },
    "q04": {
        "type": "single",
        "question": "\n<p>To solve the <b>Dining Philosopher</b>'s problem, the book proposes the\nfollowing solution:</p>\n",
        "responses": {
            "order": "Change the order in which the last philosopher acquires the forks.",
            "waiter": "Have a waiter direct which philosophers can eat.",
            "starve": "Just let some of the philosophers starve.",
            "rdrn": "Have philosophers eat in round-robin fashion.",
            "forks": "Buy more forks."
        }
    },
    "q05": {
        "type": "blank",
        "question": "\n<p>Two types of non-deadlock concurrency bugs are:</p>\n\n<ol>\n\n<li><b>(1)</b> ____: These bugs occur when the assumption of atomicity is\n  incorrect.</li>\n\n<li><b>(2)</b> ____: These bugs occur when the desired order of operations\n  is not enforced during execution.</li>\n\n</ol>\n"
    },
    "q06": {
        "type": "blank",
        "question": "\n<p><b>Deadlock</b> occurs when the following four conditions hold:</p>\n\n<ol>\n\n<li><b>(1)</b> ____: There exists a circular chain of threads such that each\nthread holds one or more resources that are being requested by the next\nthread in the chain.</li>\n\n<li><b>(2)</b> ____: Resources cannot be forcibly removed from threads that\n  are holding them.</li>\n\n<li><b>(3)</b> ____: Threads hold resources allocated to them while waiting\n  for additional resources.</li>\n\n<li><b>(4)</b> ____: Threads claim exclusive control of resources that they\n  require.</li>\n\n</ol>\n"
    },
    "q07": {
        "type": "multiple",
        "question": "\n<p>Which of the following are ways to <b>prevent deadlock</b> (<i>choose\nall that apply</i>)?</p>\n",
        "responses": {
            "ordering": "Provide some form of ordering to circumvent circular waiting.",
            "holding": "Make sure we always acquire locks one at a time.",
            "livelock": "Prefer methods that utilize livelock instead of deadlock.",
            "lockfree": "Avoid locks by using atomic hardware instructions."
        }
    },
    "q08": {
        "type": "blank",
        "question": "\n<p>Rather than prevent deadlock, we can instead try to avoid it by having a\nsmart <b>(1)</b> ____ that will consider the dependencies between threads\nor by having a service that <b>(2)</b> ____ deadlock and provides\n<b>(3)</b> ____ techniques.</p>\n"
    },
    "q09": {
        "type": "blank",
        "question": "\n<p>Suppose you and your friends are going <i>slacklining</i>. Unfortunately,\nthe slackline can only support up to <i>three</i> people on it at a time.\u00a0\nTherefore, if they are many people, they will need to wait before they can\nget onto the slackline.</p>\n\n<p>Assuming each person performs the following procedure:</p>\n\n<pre>\nget_on()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Get on slackline if there is enough room\ndo_slack_line() \u00a0 // Attempt to walk across slackline\nget_off() \u00a0 \u00a0 \u00a0 \u00a0 // Get off of slackline\n</pre>\n\n<p>Model this <b>synchronization problem</b> using POSIX <b>threads</b>,\n<b>mutexes</b>, or <b>condition variables</b>.  Assume each person is\nrepresented as a <b>thread</b> that calls the functions above to get on the\nslackline, cross the slackline, and then get off the slackline.</p>\n\n<p>Assuming the following global variables:</p>\n\n<pre>\nsize_t CAPACITY = 3  // Maximum number of people on slackline\nsize_t Slackers = 0  // Current number of people on slackline\n\nMutex  Lock\nCond   Line\n</pre>\n\n<p>Select and order the following lines of code to implement each of the\nfunctions below:</p>\n\n<pre>\nA. mutex_lock(Lock)\nB. mutex_unlock(Lock)\nC. cond_wait(Line, Lock)\nD. cond_signal(Line)\nE. while Slackers >= CAPACITY\nF. while Slackers < CAPACITY\nG. Slackers++\nH. Slackers--\n</pre>\n\n<p>\n<ol>\n<li>Select and order the lines of code above to implement the\n<tt>get_on()</tt> function. <b>(1)</b> ____</li>\n\n<li>Select and order the lines of code above to implement the\n<tt>get_off()</tt> function. <b>(2)</b> ____</li>\n</ol>\n</p>\n\n<center>\n<p><b>Put a single space between each line of code (ie. \"A B C\")).</b></p>\n</center>\n"
    },
    "q10": {
        "type": "blank",
        "question": "\n<p>Given the previous <i>slacklining</i> scenario, where the slackline can\nonly support up to <i>three</i> people on it at a time.</p>\n\n<p>Model this <b>synchronization problem</b> using POSIX <b>threads</b> and\n<b>semaphores</b>.  Assume each person is represented as a <b>thread</b>\nthat calls the functions above to get on the slackline, cross the\nslackline, and then get off the slackline.</p>\n\n<p>Assuming the following global variables:</p>\n\n<pre>\nSemaphore Line = ?\n</pre>\n\n<p>Select and order the following lines of code to implement each of the\nfunctions below:</p>\n\n<pre>\nA. sem_wait(Line)\nB. sem_post(Line)\nC. Line++\nD. Line--\nE. if Line == 0\nF. if Line > 0\n</pre>\n\n<p>\n<ol>\n<li>What value should the <tt>Line</tt> <b>semaphore</b> be initialized to? ____</li>\n\n<li>Select and order the lines of code above to implement the\n<tt>get_on()</tt> function. <b>(1)</b> ____</li>\n\n<li>Select and order the lines of code above to implement the\n<tt>get_off()</tt> function. <b>(2)</b> ____</li>\n</ol>\n</p>\n\n<center>\n<p><b>Put a single space between each line of code (ie. \"A B C\")).</b></p>\n</center>\n"
    }
}
